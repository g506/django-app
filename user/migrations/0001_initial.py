# Generated by Django 3.1.5 on 2021-06-25 20:08

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import framework.validators
import imagekit.models.fields
import user.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone', models.CharField(blank=True, max_length=15, null=True)),
                ('first_name', models.CharField(blank=True, default='', max_length=255, verbose_name='First Name')),
                ('last_name', models.CharField(blank=True, default='', max_length=255, verbose_name='Last Name')),
                ('gender', models.PositiveSmallIntegerField(blank=True, choices=[(0, 'Male'), (1, 'Female'), (2, 'Other')], null=True)),
                ('user_type', models.CharField(max_length=100)),
                ('bio', models.CharField(blank=True, default='', max_length=255, verbose_name='Bio')),
                ('url', models.URLField(blank=True, default='', max_length=255, verbose_name='URL')),
                ('location', models.CharField(blank=True, default='', max_length=255)),
                ('country', models.CharField(default='IND', max_length=10)),
                ('birthday', models.DateField(default=datetime.date.today)),
                ('isOnline', models.BooleanField(default=False)),
                ('familyPlans', models.CharField(max_length=200, null=True)),
                ('politics', models.CharField(max_length=200)),
                ('coins', models.IntegerField(default=0)),
                ('zodiacSign', models.CharField(max_length=200)),
                ('height', models.IntegerField(default=0)),
                ('payment_method', models.CharField(max_length=10)),
                ('avatar', imagekit.models.fields.ProcessedImageField(blank=True, null=True, upload_to=user.models.User.get_avatar_path, validators=[framework.validators.validate_file_size], verbose_name='Avatar')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Interests',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
            ],
            options={
                'verbose_name': 'Interest',
                'verbose_name_plural': 'Interests',
            },
        ),
        migrations.CreateModel(
            name='Tags',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
            },
        ),
        migrations.CreateModel(
            name='UserSocialProfile',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('platform', models.PositiveSmallIntegerField(choices=[(0, 'Other'), (1, 'Twitter'), (2, 'LinkedIn'), (3, 'Facebook'), (4, 'Instagram')], default=4)),
                ('url', models.URLField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Social Profile',
                'verbose_name_plural': 'User Social Profiles',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='interestedIn',
            field=models.ManyToManyField(blank=True, related_name='interest', to='user.Interests'),
        ),
        migrations.AddField(
            model_name='user',
            name='tags',
            field=models.ManyToManyField(related_name='profile_tags', to='user.Tags'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
